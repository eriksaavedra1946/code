# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding Liberty Team!

service: fasecolda-table # NOTE: update this with your service name

custom:
  default_stage: dev
  bucket: ${opt:stage, self:custom.default_stage}
  apigwBinary:
    types:
      - "*/*"
  fasecoldaTableName: "table-fasecolda-${self:provider.stage}"
  dynamodb:
    start:
      migrate: true
  bucketS3Name: "fasecolda-csv-${self:provider.stage}"
  iamRoleLambda: "fasecolda-csv-role-${self:provider.stage}"
    
package:
  exclude:
    - node_modules/**

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-include-dependencies
  - serverless-apigw-binary

provider:
  name: aws
  runtime: python2.7
  stage: ${opt:stage, self:custom.default_stage}
  region: us-east-1
  memorySize: 3008
  role: { "Fn::GetAtt": ["FasecoldaTableIamRole", "Arn"] }
  Tags:
  # Set Tags for Resource
  stackTags:
    lm_troux_uid: 440EC864-F62C-47C9-8B02-837C0CC73B11
    lm_app: 'CO_FASECOLDA_TABLE'
    lm_app_env: ${self:custom.stage}
    lm_sbu: INTL
    intl_country: co
    intl_region: latam
  

functions:
  lambda:
    handler: handler.csv_reader
    timeout: 600
    events:
      - s3:
         bucket: ${self:custom.bucketS3Name}
         event: s3:ObjectCreated:*
         rules:
          - suffix: .csv
resources:
  Resources:
    FasecoldaTableDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        TableName: ${self:custom.fasecoldaTableName}
    FasecoldaTableIamRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Description: "Role to lambda function"
        Path: "/"
        Policies: 
          -
            PolicyName: "fasecolda-csv-policies"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                    - s3:GetObject
                    - s3:GetObjectAcl
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: ["arn:aws:s3:::${self:custom.bucket}/*","arn:aws:s3:::${self:custom.bucketS3Name}/*",
                  { "Fn::GetAtt": ["FasecoldaTableDynamoDBTable", "Arn"] }, 
                  arn:aws:logs:*:*:log-group:/aws/lambda/*]
                    
        RoleName: ${self:custom.iamRoleLambda}